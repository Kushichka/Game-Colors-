{"version":3,"sources":["main.js"],"names":["window","addEventListener","start","state","counter","myBestSeconds","myBestMinutes","squaresAmount","fields","matches","seconds","minutes","timer","colors","name","color","used","3","4","createGameField","colorId","fieldWrapper","squares","length","Math","floor","random","push","document","querySelector","Promise","resolve","reject","forEach","square","createElement","classList","add","append","querySelectorAll","item","i","element","elementId","stepsSpan","setTimeout","setBestTime","contains","firstClick","timeOutClick","setInterval","timeTic","spanBestSeconds","closeSquare","remove","style","backgroundColor","then","setSteps","steps","clickEvent","winSquare","clear","openSquare","congratulations","localStorage","getItem","spanBestMinutes","this","stepsAmount","textContent","removeAttribute","congratMinutes","congratSeconds","bestSeconds","actualBestSeconds","actualBestMinutes","setTime","bestMinutes","setItem","restartBtn","newTime","oldTime","minutesSpan","secondsSet","minutesSet","location","reload","secondsSpan"],"mappings":"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","file":"main.min.js","sourcesContent":["window.addEventListener('DOMContentLoaded', () => {\r\n\r\n    const squaresAmount = 16,\r\n          fields = [];\r\n    let matches = 0,\r\n        seconds = 0,\r\n        minutes = 0,\r\n        start = false,\r\n        timer,\r\n        steps = 0;\r\n\r\n\r\n    // createGameField //\r\n    const colors = {\r\n        0: { name: 'red', color: '#ff0000', used: 0 },\r\n        1: { name: 'blue', color: '#0066ff', used: 0 },\r\n        2: { name: 'pink', color: '#ff33cc', used: 0 },\r\n        3: { name: 'violet', color: '#9900cc', used: 0 },\r\n        4: { name: 'yellow', color: '#e6e600', used: 0 },\r\n        5: { name: 'orange', color: '#ff8000', used: 0 },\r\n        6: { name: 'green', color: '#339933', used: 0 },\r\n        7: { name: 'brown', color: '#996633', used: 0 }\r\n    };\r\n\r\n    function generateColor() {\r\n        const colorId = Math.floor(Math.random() * 8);\r\n\r\n        if (colors[colorId].used != 2) {\r\n            colors[colorId].used++;\r\n\r\n            fields.push(colors[colorId].color);\r\n            return 1;\r\n        } else return 0;\r\n    }\r\n\r\n    function createGameField(fields, squares) {\r\n        let counter = 0;\r\n\r\n        for (let i = 0; fields.length < squares; i++) {\r\n            const state = generateColor();\r\n\r\n            if (state) {\r\n                counter++;\r\n            } else continue;\r\n        }\r\n\r\n        if (counter === squares) {\r\n            const fieldWrapper = document.querySelector('.game__field');\r\n\r\n            new Promise((resolve, reject) => {\r\n                resolve(\r\n                    fields.forEach(() => {\r\n                        const square = document.createElement('div');\r\n                        square.classList.add('game__field-square', 'closed');\r\n                        fieldWrapper.append(square);\r\n                    })\r\n                );\r\n            })\r\n            .then(() => {\r\n                const squares = document.querySelectorAll('.game__field-square');\r\n\r\n                    squares.forEach((item, i) => {\r\n                        item.addEventListener('click', () => clickEvent(item, i));\r\n                    });\r\n            });\r\n        }\r\n    }\r\n\r\n    createGameField(fields, squaresAmount);\r\n\r\n    function setBestTime() {\r\n        const spanBestMinutes = document.querySelector('.game__panel-best-minutes'),\r\n              spanBestSeconds = document.querySelector('.game__panel-best-seconds'),\r\n              myBestSeconds = localStorage.getItem('bestSeconds'),\r\n              myBestMinutes = localStorage.getItem('bestMinutes');\r\n\r\n        if(myBestSeconds) {\r\n            setTime(spanBestSeconds, spanBestMinutes, myBestSeconds, myBestMinutes);\r\n        } else {\r\n            setTime(spanBestSeconds, spanBestMinutes, 0, 0);\r\n        }\r\n    }\r\n\r\n    setBestTime();\r\n\r\n    // click events //\r\n    const firstClick = {\r\n        element: '',\r\n        color: '',\r\n        clear() {\r\n            this.element = '';\r\n            this.color = '';\r\n        }\r\n    };\r\n    let timeOutClick = false; \r\n\r\n    function clickEvent(element, elementId) {\r\n        if(element.classList.contains('opened') || element === firstClick.element || timeOutClick === true) {\r\n           return; \r\n        }\r\n\r\n        if(!start) {\r\n            start = true;\r\n            startTimer();\r\n        }\r\n\r\n        const color = fields[elementId];\r\n        const stepsSpan = document.querySelector('.game__panel-steps-count');\r\n\r\n        openSquare(element, color);\r\n\r\n        if (firstClick.color.length === 0) {\r\n            firstClick.element = element;\r\n            firstClick.color = color;\r\n\r\n        } else if (firstClick.color === color && timeOutClick != true) {\r\n            timeOutClick = true;\r\n            matches++;\r\n            steps++;\r\n            setSteps(stepsSpan, steps);\r\n\r\n            if (matches === 8) {\r\n                clearInterval(timer);\r\n                congratulations('show');\r\n            } else {\r\n                setTimeout(() => {\r\n                    winSquare(element);\r\n                    winSquare(firstClick.element);\r\n\r\n                    firstClick.clear();\r\n                    timeOutClick = false;\r\n                }, 1000);\r\n            }\r\n        } else {\r\n            steps++;\r\n            setSteps(stepsSpan, steps);\r\n\r\n            new Promise((resolve, reject) => {\r\n                resolve(\r\n                    setTimeout(() => {\r\n                        closeSquare(element);\r\n                        closeSquare(firstClick.element);\r\n        \r\n                        firstClick.clear();\r\n                    }, 1000)\r\n                );\r\n            })\r\n            .then(() => {\r\n                timeOutClick = true;\r\n                setTimeout(() => {\r\n                    timeOutClick = false;\r\n                }, 1100);\r\n            });     \r\n        }\r\n    }\r\n\r\n    function setSteps(stepsSpan, stepsAmount) {\r\n        stepsSpan.textContent = stepsAmount;\r\n    }\r\n\r\n    function openSquare(element, color) {\r\n        element.classList.add('openColor');\r\n        setTimeout(() => {\r\n            element.classList.remove('closed');\r\n            element.style.backgroundColor = color;\r\n            element.classList.remove('openColor');\r\n        }, 200);\r\n    }\r\n\r\n    function closeSquare(element) {\r\n        element.classList.add('closed');\r\n        element.removeAttribute('style');   \r\n    }\r\n\r\n    function winSquare(element) {\r\n        element.classList.add('opened');\r\n        element.removeAttribute('style');\r\n    }\r\n\r\n    // restart btn //\r\n    const restartBtn = document.querySelectorAll('.restart-btn');\r\n\r\n    restartBtn.forEach(btn => {\r\n        btn.addEventListener('click', () => {\r\n            location.reload();\r\n            congratulations('hide');\r\n        });\r\n    })\r\n\r\n    // congratulations //\r\n    function congratulations(state) {        \r\n        if(state === 'show') {\r\n            document.querySelector('.congratulations-wrapper')\r\n            .classList.remove('hide');\r\n            showStat();\r\n        }\r\n\r\n        if(state === 'hide') {\r\n            document.querySelector('.congratulations-wrapper')\r\n            .classList.add('hide');\r\n        }\r\n    }\r\n\r\n    function showStat() {\r\n        const congratMinutes  = document.querySelector('.congratulations__score-time-minutes'),\r\n              congratSeconds = document.querySelector('.congratulations__score-time-seconds'),\r\n              bestMinutes = document.querySelector('.congratulations__score-best-minutes'),\r\n              bestSeconds = document.querySelector('.congratulations__score-best-seconds'),\r\n              stepsSpan = document.querySelector('.congratulations__score-steps'),\r\n              actualBestSeconds = localStorage.getItem('bestSeconds'),\r\n              actualBestMinutes = localStorage.getItem('bestMinutes');\r\n\r\n        setTime(congratSeconds, congratMinutes, seconds, minutes);\r\n        setSteps(stepsSpan, steps);\r\n\r\n        if(actualBestSeconds != null) {\r\n            const oldTime = actualBestMinutes * 60 + actualBestSeconds,\r\n                  newTime = minutes * 60 + seconds;\r\n            if(newTime < oldTime) {\r\n                setTime(bestSeconds, bestMinutes, seconds, minutes);\r\n                localStorage.setItem('bestSeconds', seconds);\r\n                localStorage.setItem('bestMinutes', minutes);\r\n            } else {\r\n                setTime(bestSeconds, bestMinutes, actualBestSeconds, actualBestMinutes);\r\n            }\r\n        } else {\r\n            setTime(bestSeconds, bestMinutes, seconds, minutes);\r\n            localStorage.setItem('bestSeconds', seconds);\r\n            localStorage.setItem('bestMinutes', minutes);\r\n        }\r\n    }\r\n\r\n    function setTime(secondsSpan, minutesSpan, secondsSet, minutesSet) {\r\n        if(secondsSet < 10) {\r\n            secondsSpan.textContent = `0${secondsSet}`;\r\n        } else {\r\n            secondsSpan.textContent = secondsSet;\r\n        }\r\n\r\n        if(minutesSet < 10) {\r\n            minutesSpan.textContent = `0${minutesSet} `;\r\n        } else {\r\n            minutesSpan.textContent = minutesSet;\r\n        }\r\n    }\r\n\r\n\r\n    // timer //\r\n    function startTimer() {\r\n        timer = setInterval(timeTic, 1000);\r\n    }\r\n\r\n    const minutesSpan  = document.querySelector('.game__panel-time-minutes'),\r\n          secondsSpan = document.querySelector('.game__panel-time-seconds');\r\n\r\n    function timeTic() {\r\n        seconds++;\r\n\r\n        if(seconds === 60) {\r\n            minutes++;\r\n            seconds = 0;\r\n        }\r\n\r\n        setTime(secondsSpan, minutesSpan, seconds, minutes);\r\n    }\r\n\r\n});"]}